# This file was automagically generated by mbed.org.
# If you would like to add your own targets, create a
# project.cmake file locally in your project directory.

CMAKE_MINIMUM_REQUIRED(VERSION 3.9)
SET(CMAKE_SYSTEM_NAME Generic)
#SET(CMAKE_SYSTEM_PROCESSOR arm)
SET(CMAKE_CROSSCOMPILING TRUE)

# force compiler settings
SET(CMAKE_C_COMPILER_WORKS TRUE)
SET(CMAKE_CXX_COMPILER_WORKS TRUE)

# force cmake compilers
SET(CMAKE_ASM_COMPILER    "arm-none-eabi-gcc")
SET(CMAKE_C_COMPILER      "arm-none-eabi-gcc")
SET(CMAKE_CXX_COMPILER    "arm-none-eabi-g++")
SET(ELF2BIN               "arm-none-eabi-objcopy")


# if the environment does not specify build type, set to Debug
IF(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Debug"
        CACHE STRING "Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel."
        FORCE)
ENDIF()

# here starts the project
PROJECT(MotorTeamLab03 C CXX ASM)

# uncomment below to have a verbose build process
#SET(CMAKE_VERBOSE_MAKEFILE ON)

SET(LD_SYS_LIBS "-Wl,--start-group -lstdc++ -lsupc++ -lm -lc -lgcc -lnosys -lmbed -Wl,--end-group")

SET(CMAKE_C_FLAGS "-std=gnu11 -Wall -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -fmessage-length=0 -fno-exceptions -ffunction-sections -fdata-sections -funsigned-char -MMD -fno-delete-null-pointer-checks -fomit-frame-pointer -Os -g -DMBED_TRAP_ERRORS_ENABLED=1 -mcpu=cortex-m0plus -mthumb -include mbed_config.h")
SET(CMAKE_CXX_FLAGS "-std=gnu++14 -fno-rtti -Wvla -Wall -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -fmessage-length=0 -fno-exceptions -ffunction-sections -fdata-sections -funsigned-char -MMD -fno-delete-null-pointer-checks -fomit-frame-pointer -Os -g -DMBED_TRAP_ERRORS_ENABLED=1 -mcpu=cortex-m0plus -mthumb  -include mbed_config.h")
SET(CMAKE_ASM_FLAGS "-x assembler-with-cpp -Wall -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -fmessage-length=0 -fno-exceptions -ffunction-sections -fdata-sections -funsigned-char -MMD -fno-delete-null-pointer-checks -fomit-frame-pointer -Os -g -DMBED_TRAP_ERRORS_ENABLED=1 -mcpu=cortex-m0plus -mthumb  -include mbed_config.h")
SET(CMAKE_CXX_LINK_FLAGS "-Wl,--gc-sections -Wl,--wrap,main -Wl,--wrap,__malloc_r -Wl,--wrap,__free_r -Wl,--wrap,__realloc_r -Wl,--wrap,__memalign_r -Wl,--wrap,__calloc_r -Wl,--wrap,exit -Wl,--wrap,atexit -Wl,-n -mcpu=cortex-m0plus -mthumb -DMBED_BOOT_STACK_SIZE=4096 -DXIP_ENABLE=0  -L${CMAKE_CURRENT_SOURCE_DIR}/mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM ")
SET(CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS} ${LD_SYS_LIBS} -T ${CMAKE_BINARY_DIR}/MotorTeamLab03_pp.link_script.ld")

ADD_DEFINITIONS(
  -DARM_MATH_CM0PLUS
  -DCOMPONENT_NSPE=1
  -DCOMPONENT_PSA_SRV_EMUL=1
  -DCOMPONENT_PSA_SRV_IMPL=1
  -DDEVICE_ANALOGIN=1
  -DDEVICE_ANALOGOUT=1
  -DDEVICE_I2C=1
  -DDEVICE_I2CSLAVE=1
  -DDEVICE_INTERRUPTIN=1
  -DDEVICE_PORTIN=1
  -DDEVICE_PORTINOUT=1
  -DDEVICE_PORTOUT=1
  -DDEVICE_PWMOUT=1
  -DDEVICE_SEMIHOST=1
  -DDEVICE_SERIAL=1
  -DDEVICE_SLEEP=1
  -DDEVICE_SPI=1
  -DDEVICE_SPISLAVE=1
  -DDEVICE_STDIO_MESSAGES=1
  -DDEVICE_USTICKER=1
  -DMBED_BUILD_TIMESTAMP=1583352790.2817318
  -DTARGET_CORTEX
  -DTARGET_CORTEX_M
  -DTARGET_FF_ARDUINO
  -DTARGET_Freescale
  -DTARGET_KL25Z
  -DTARGET_KLXX
  -DTARGET_LIKE_CORTEX_M0
  -DTARGET_LIKE_MBED
  -DTARGET_M0P
  -DTARGET_NAME=KL25Z
  -DTARGET_RELEASE
  -DTOOLCHAIN_GCC
  -DTOOLCHAIN_GCC_ARM
  -D__CMSIS_RTOS
  -D__CORTEX_M0PLUS
  -D__MBED_CMSIS_RTOS_CM
  -D__MBED__=1
  )
INCLUDE_DIRECTORIES(
  mbed/platform
  mbed/hal
  mbed/drivers
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM
  mbed
  MotorTeam
  /usr/src/mbed-sdk
  
  )

# executable MotorTeamLab03
ADD_EXECUTABLE(MotorTeamLab03
  MotorTeam/MotorTeam.cpp
  MotorTeam/MotorTeam.h
  main.cpp
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/MKL25Z4.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/PeripheralNames.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/PeripheralPins.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/PinNames.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/PortNames.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/RTE_Components.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/arm_math.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/clk_freqs.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/cmsis.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/cmsis_armcc.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/cmsis_armclang.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/cmsis_compiler.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/cmsis_gcc.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/cmsis_iccarm.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/cmsis_nvic.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/cmsis_version.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/core_armv8mbl.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/core_armv8mml.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/core_cm0.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/core_cm0plus.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/core_cm1.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/core_cm23.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/core_cm3.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/core_cm33.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/core_cm4.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/core_cm7.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/core_sc000.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/core_sc300.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/device.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/gpio_object.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/mbed_cmsis_conf.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/mbed_fault_handler.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/mbed_rtx.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/mpu_armv7.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/mpu_armv8.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/objects.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/system_MKL25Z4.h
  mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/tz_context.h
  mbed/drivers/AnalogIn.h
  mbed/drivers/AnalogOut.h
  mbed/drivers/BusIn.h
  mbed/drivers/BusInOut.h
  mbed/drivers/BusOut.h
  mbed/drivers/CAN.h
  mbed/drivers/DigitalIn.h
  mbed/drivers/DigitalInOut.h
  mbed/drivers/DigitalOut.h
  mbed/drivers/Ethernet.h
  mbed/drivers/FlashIAP.h
  mbed/drivers/I2C.h
  mbed/drivers/I2CSlave.h
  mbed/drivers/InterruptIn.h
  mbed/drivers/InterruptManager.h
  mbed/drivers/LowPowerTicker.h
  mbed/drivers/LowPowerTimeout.h
  mbed/drivers/LowPowerTimer.h
  mbed/drivers/MbedCRC.h
  mbed/drivers/PortIn.h
  mbed/drivers/PortInOut.h
  mbed/drivers/PortOut.h
  mbed/drivers/PwmOut.h
  mbed/drivers/QSPI.h
  mbed/drivers/RawSerial.h
  mbed/drivers/SPI.h
  mbed/drivers/SPISlave.h
  mbed/drivers/Serial.h
  mbed/drivers/SerialBase.h
  mbed/drivers/SerialWireOutput.h
  mbed/drivers/TableCRC.h
  mbed/drivers/Ticker.h
  mbed/drivers/Timeout.h
  mbed/drivers/Timer.h
  mbed/drivers/TimerEvent.h
  mbed/drivers/UARTSerial.h
  mbed/hal/Driver_Common.h
  mbed/hal/Driver_Storage.h
  mbed/hal/LowPowerTickerWrapper.h
  mbed/hal/analogin_api.h
  mbed/hal/analogout_api.h
  mbed/hal/buffer.h
  mbed/hal/can_api.h
  mbed/hal/can_helper.h
  mbed/hal/crc_api.h
  mbed/hal/critical_section_api.h
  mbed/hal/dma_api.h
  mbed/hal/ethernet_api.h
  mbed/hal/flash_api.h
  mbed/hal/flash_data.h
  mbed/hal/gpio_api.h
  mbed/hal/gpio_irq_api.h
  mbed/hal/i2c_api.h
  mbed/hal/itm_api.h
  mbed/hal/lp_ticker_api.h
  mbed/hal/mbed_lp_ticker_wrapper.h
  mbed/hal/mpu_api.h
  mbed/hal/pinmap.h
  mbed/hal/port_api.h
  mbed/hal/pwmout_api.h
  mbed/hal/qspi_api.h
  mbed/hal/rtc_api.h
  mbed/hal/serial_api.h
  mbed/hal/sleep_api.h
  mbed/hal/spi_api.h
  mbed/hal/spm_api.h
  mbed/hal/ticker_api.h
  mbed/hal/trng_api.h
  mbed/hal/us_ticker_api.h
  mbed/mbed.h
  mbed/platform/ATCmdParser.h
  mbed/platform/CThunk.h
  mbed/platform/CThunkBase.h
  mbed/platform/CallChain.h
  mbed/platform/Callback.h
  mbed/platform/CircularBuffer.h
  mbed/platform/CriticalSectionLock.h
  mbed/platform/DeepSleepLock.h
  mbed/platform/DirHandle.h
  mbed/platform/FileBase.h
  mbed/platform/FileHandle.h
  mbed/platform/FileLike.h
  mbed/platform/FilePath.h
  mbed/platform/FileSystemHandle.h
  mbed/platform/FileSystemLike.h
  mbed/platform/FunctionPointer.h
  mbed/platform/LocalFileSystem.h
  mbed/platform/NonCopyable.h
  mbed/platform/PlatformMutex.h
  mbed/platform/ScopedLock.h
  mbed/platform/ScopedRamExecutionLock.h
  mbed/platform/ScopedRomWriteLock.h
  mbed/platform/SharedPtr.h
  mbed/platform/SingletonPtr.h
  mbed/platform/Span.h
  mbed/platform/Stream.h
  mbed/platform/Transaction.h
  mbed/platform/critical.h
  mbed/platform/mbed_application.h
  mbed/platform/mbed_assert.h
  mbed/platform/mbed_crash_data_offsets.h
  mbed/platform/mbed_critical.h
  mbed/platform/mbed_debug.h
  mbed/platform/mbed_error.h
  mbed/platform/mbed_error_hist.h
  mbed/platform/mbed_interface.h
  mbed/platform/mbed_mem_trace.h
  mbed/platform/mbed_mktime.h
  mbed/platform/mbed_mpu_mgmt.h
  mbed/platform/mbed_poll.h
  mbed/platform/mbed_power_mgmt.h
  mbed/platform/mbed_preprocessor.h
  mbed/platform/mbed_retarget.h
  mbed/platform/mbed_rtc_time.h
  mbed/platform/mbed_semihost_api.h
  mbed/platform/mbed_sleep.h
  mbed/platform/mbed_stats.h
  mbed/platform/mbed_toolchain.h
  mbed/platform/mbed_version.h
  mbed/platform/mbed_wait_api.h
  mbed/platform/platform.h
  mbed/platform/rtc_time.h
  mbed/platform/semihost_api.h
  mbed/platform/sleep.h
  mbed/platform/toolchain.h
  mbed/platform/wait_api.h
  mbed_config.h
  round.h
  )
SET_TARGET_PROPERTIES(MotorTeamLab03 PROPERTIES ENABLE_EXPORTS 1)
# add syslibs dependencies to create the correct linker order
TARGET_LINK_LIBRARIES(MotorTeamLab03 -lstdc++ -lsupc++ -lm -lc -lgcc -lnosys)

add_custom_command(TARGET MotorTeamLab03 PRE_LINK
                   COMMAND "arm-none-eabi-cpp" -E -P -Wl,--gc-sections -Wl,--wrap,main -Wl,--wrap,_malloc_r -Wl,--wrap,_free_r -Wl,--wrap,_realloc_r -Wl,--wrap,_memalign_r -Wl,--wrap,_calloc_r -Wl,--wrap,exit -Wl,--wrap,atexit -Wl,-n -mcpu=cortex-m0plus -mthumb -DMBED_BOOT_STACK_SIZE=4096 -DXIP_ENABLE=0 mbed/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/MKL25Z4.ld -o ${CMAKE_CURRENT_BINARY_DIR}/MotorTeamLab03_pp.link_script.ld
                   WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                   BYPRODUCTS "${CMAKE_CURRENT_BINARY_DIR}/MotorTeamLab03_pp.link_script.ld"
                   )

add_custom_command(TARGET MotorTeamLab03 POST_BUILD
                   COMMAND ${ELF2BIN} -O ihex $<TARGET_FILE:MotorTeamLab03> $<TARGET_FILE:MotorTeamLab03>.hex
                   COMMAND ${CMAKE_COMMAND} -E echo "-- built: $<TARGET_FILE:MotorTeamLab03>.hex"
                  )




##########################################################################
# mbed-cli specific targets
##########################################################################

# detect the build type and select the corresponding cli profile
SET(MBED_BUILD_PROFILE "")
STRING(TOLOWER ${CMAKE_BUILD_TYPE} LOWERCASE_CMAKE_BUILD_TYPE)
IF(LOWERCASE_CMAKE_BUILD_TYPE MATCHES debug)
    SET(MBED_BUILD_PROFILE "mbed-os/tools/profiles/debug.json")
ELSEIF(LOWERCASE_CMAKE_BUILD_TYPE MATCHES relwithdebinfo)
    SET(MBED_BUILD_PROFILE "mbed-os/tools/profiles/develop.json")
ELSEIF(LOWERCASE_CMAKE_BUILD_TYPE MATCHES release)
    SET(MBED_BUILD_PROFILE "mbed-os/tools/profiles/release.json")
ELSEIF(LOWERCASE_CMAKE_BUILD_TYPE MATCHES minsizerel)
    SET(MBED_BUILD_PROFILE "mbed-os/tools/profiles/release.json")
ELSE()
  MESSAGE(WARNING "Build type '${CMAKE_BUILD_TYPE}' is unknown, using debug profile")
  SET(MBED_BUILD_PROFILE "mbed-os/tools/profiles/debug.json")
ENDIF()

# optional custom target to build via mbed-cli
ADD_CUSTOM_TARGET(mbed-cli-build
        COMMAND ${CMAKE_COMMAND} -E echo "mbed compile --build BUILD/${CMAKE_BUILD_TYPE} --profile ${MBED_BUILD_PROFILE}"
        COMMAND mbed compile --build BUILD/${CMAKE_BUILD_TYPE} --profile ${MBED_BUILD_PROFILE}
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        SOURCES ${SOURCE_FILES} ${SYS_SOURCE_FILES})

IF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/project.cmake)
  INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/project.cmake)
ELSE()
  MESSAGE(STATUS "Add a local project.cmake file to add your own targets.")
ENDIF()

# this will take care of binary directories generated by cmake/clion not to confuse the cli build
FILE(GENERATE OUTPUT "${CMAKE_BINARY_DIR}/.mbedignore" CONTENT "*")